generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model client {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description       String?             @db.VarChar(255)
  image             String?             @db.VarChar(255)
  name              String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  user_id           String              @db.Uuid
  tenant_id         String              @db.VarChar(255)
  user              user                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project           project[]
  subscription_plan subscription_plan[]
}

model project {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String           @db.VarChar(255)
  status             String           @db.VarChar(255)
  client_id          String?          @db.Uuid
  project_manager_id String?          @db.Uuid
  created_at         DateTime         @default(now()) @db.Timestamp(6)
  updated_at         DateTime         @default(now()) @db.Timestamp(6)
  client             client?          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_manager    project_manager? @relation(fields: [project_manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model project_manager {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  project    project[]
  user       user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscription_plan {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  client_id  String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  client     client?  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  client          client[]
  project_manager project_manager[]
}
